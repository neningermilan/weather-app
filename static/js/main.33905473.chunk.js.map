{"version":3,"sources":["components/Title.js","actions/search-action.js","components/FilterCities.js","components/WeatherBox.js","actions/fetch-action.js","App.js","serviceWorker.js","reducers/weather-reducer.js","index.js"],"names":["Title","react_default","a","createElement","className","React","Component","SEARCH_WEATHER","updateSearch","result","type","payload","searchWeather","searchValue","weather","dispatch","filter","res","name","toLowerCase","includes","FilterCities","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","_this$props","isLoading","target","value","onChange","bind","placeholder","mapActionsToProps","connect","state","WeatherBox","_ref","weatherItem","search","map","displayedItem","index","key","concat","main","temp","temp_min","temp_max","humidity","role","scope","FETCH_WEATHER","APPID","receivedWeather","list","fetchWeather","fetch","then","json","error","console","log","App","onFetchWeather","components_Title","components_FilterCities","components_WeatherBox","Boolean","window","location","hostname","match","initialState","allStoreEnchancers","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","arguments","length","undefined","objectSpread","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33905473.chunk.js","sourcesContent":["import React from 'react';\r\nclass Title extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className=\"header-title\">Weather around Veszprém</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Title;\r\n","export const SEARCH_WEATHER = 'SEARCH_WEATHER';\r\n\r\nexport const updateSearch = result => ({\r\n  type: SEARCH_WEATHER,\r\n  payload: result\r\n});\r\n/**\r\n * If the searchValue is empty, pass the whole weather array to the search state, \r\n * if not filters the values, keep the original weather state, and pass the filtered objects, then triggers the state change.\r\n * \r\n * @param {string} searchValue \r\n * @param {Array} weather \r\n */\r\nexport function searchWeather(searchValue, weather) {\r\n  return dispatch => {\r\n    let result = weather;\r\n    if (searchValue !== '') {\r\n      result = weather.filter(res => {\r\n        return res.name.toLowerCase().includes(searchValue);\r\n      });\r\n    }\r\n    dispatch(updateSearch(result));\r\n  };\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { searchWeather } from '../actions/search-action';\r\n\r\nclass FilterCities extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.searchWeather = searchWeather();\r\n  }\r\n/**\r\n * If the data is loaded calls the searchWeather function from the search-action.\r\n * @param {event} event \r\n */\r\n  updateSearch(event) {\r\n    const { isLoading, weather } = this.props;\r\n    if (!isLoading) {\r\n      this.props.searchWeather(event.target.value.toLowerCase(), weather);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        type=\"text\"\r\n        className=\"searchbar\"\r\n        onChange={this.updateSearch.bind(this)}\r\n        placeholder=\"Search in cities...\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => state;\r\nconst mapActionsToProps = {\r\n  searchWeather: searchWeather\r\n};\r\nFilterCities = connect(\r\n  mapStateToProps,\r\n  mapActionsToProps\r\n)(FilterCities);\r\n\r\nexport default FilterCities;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n/**\r\n * Container functional component for the weather data. \r\n * @returns JSX elements depending on the states. Either a loading spinner or a table with the data.\r\n * @param props \r\n */\r\nlet WeatherBox = ({ weather, isLoading, search }) => {\r\n  let weatherItem;\r\n  //Displayed item depends on, if we have a filtered state, or the original weather state without the filter. \r\n  const displayedItem = search === 'default' ? weather : search;\r\n  //As we can't use map function on an undefined item, the !isLoading check is a must. \r\n  if (!isLoading) {\r\n    weatherItem = displayedItem.map((displayedItem, index) => (\r\n      <tr key={`${index}`}>\r\n        <td>{displayedItem.name}</td>\r\n        <td>{displayedItem.main.temp} ℃</td>\r\n        <td>{displayedItem.main.temp_min} ℃</td>\r\n        <td>{displayedItem.main.temp_max} ℃</td>\r\n        <td>{displayedItem.main.humidity} %</td>\r\n      </tr>\r\n    ));\r\n  }\r\n\r\n  return isLoading ? (\r\n    <div className=\"spinner-border centeredspinner\" role=\"status\">\r\n      <span className=\"sr-only\">Loading...</span>\r\n    </div>\r\n  ) : (\r\n    <div>\r\n      <table className=\"table table-hover table-dark\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">City</th>\r\n            <th scope=\"col\">Temperature</th>\r\n            <th scope=\"col\">Min. Temperature</th>\r\n            <th scope=\"col\">Max. Temperature</th>\r\n            <th scope=\"col\">Humidity</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{weatherItem}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n/**\r\n *@mapStateToProps receive the state of the store, then we can choose what props we want to add to the component.\r\n */\r\nconst mapStateToProps = state => state;\r\n\r\nWeatherBox = connect(\r\n  mapStateToProps,\r\n  null\r\n)(WeatherBox);\r\n\r\nexport default WeatherBox;\r\n","export const FETCH_WEATHER = 'FETCH_WEATHER';\r\nconst APPID = '9a8730ae60a43e714a4c9847fe152ea4';\r\n\r\nexport const receivedWeather = result => ({\r\n  type: FETCH_WEATHER,\r\n  payload: result.list\r\n});\r\n/**\r\n * Fetches the Weather data from the API, then trigger the state change.\r\n */\r\nexport function fetchWeather() {\r\n  return dispatch => {\r\n    fetch(\r\n      `http://api.openweathermap.org/data/2.5/find?lat=47.1258945&lon=17.837209&units=metric&cnt=30&APPID=${APPID}`\r\n    )\r\n      .then(res => res.json(), error => console.log('An error occured.', error))\r\n      .then(result => {\r\n        dispatch(receivedWeather(result));\r\n      });\r\n  };\r\n}\r\n","import React from 'react';\r\nimport Title from './components/Title';\r\nimport FilterCities from './components/FilterCities';\r\nimport WeatherBox from './components/WeatherBox';\r\nimport { connect } from 'react-redux';\r\nimport { fetchWeather } from './actions/fetch-action';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.fetchWeather = fetchWeather();\r\n  }\r\n\r\n  componentDidMount() {\r\n   //After the component is mounted ask the API for data.\r\n    this.props.onFetchWeather();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Title />\r\n        <FilterCities />\r\n        <WeatherBox />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapActionsToProps = {\r\n  onFetchWeather: fetchWeather\r\n};\r\n\r\n/**\r\n *  @mapActionsToProps dispatch actions from the components, so we don't need to use the dispatch function in the components.\r\n * The called actions automatically dispatch from the store.\r\n */\r\nexport default connect(\r\n  null,\r\n  mapActionsToProps\r\n)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_WEATHER } from '../actions/fetch-action';\r\nimport { SEARCH_WEATHER } from '../actions/search-action';\r\n\r\n// define the initial state for the reducer\r\nconst initialState = { weather: [] };\r\n/**\r\n * It will receive all the data use for the app\r\n * \r\n * @param {object} state \r\n * @param {object} action \r\n */\r\nexport function weatherReducer(state = initialState, { type, payload }) {\r\n  switch (type) {\r\n    case FETCH_WEATHER:\r\n      return { ...state, weather: payload, isLoading: false };\r\n\r\n    case SEARCH_WEATHER:\r\n      return { ...state, search: payload, isLoading: false };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport { weatherReducer } from './reducers/weather-reducer';\r\nimport thunk from 'redux-thunk';\r\n// The first argument must be react-thunk (if you wish to use it), which will provide async through the app. The second argument is for devtools only. \r\nconst allStoreEnchancers = compose(\r\n  applyMiddleware(thunk),\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n//Store creation with some default states for search, and isLoading.\r\nconst store = createStore(\r\n  weatherReducer,\r\n  { isLoading: true, search: 'default' },\r\n  allStoreEnchancers\r\n);\r\n\r\n/***\r\n * Provider: so the app components can acces the store.\r\n */\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App store={store} />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}